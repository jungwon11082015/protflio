
//font 반응형 설정

$rem-baseline: 16px !default;
$rem-fallback: false !default;
$rem-px-only: false !default;

@function rem-separator($list, $separator: false) {
  @if $separator == "comma" or $separator == "space" {
    @return append($list, null, $separator);
  } 
  
  @if function-exists("list-separator") == true {
    @return list-separator($list);
  }

  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);
  
  @each $value in $values {
    @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
      $result: append($result, $value / 1rem * $rem-baseline, $separator);
    } @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
      $result: append($result, $value / $rem-baseline * 1rem, $separator);
    } @else if type-of($value) == "list" {
      $value-separator: rem-separator($value); 
      $value: rem-convert($to, $value...);
      $value: rem-separator($value, $value-separator);
      $result: append($result, $value, $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == "map" {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}


//사용방법
.demo {
	font-size: rem(24px); // Simple
	padding: rem(5px 10px); // Multiple values
	border-bottom: rem(1px solid black); // Multiple mixed values
	box-shadow: rem(0 0 2px #ccc, inset 0 0 5px #eee); // Comma-separated values
	text-shadow: rem(1px 1px) #eee, rem(-1px) 0 #eee; // Alt ernate use
  }

  $white : #fff;
  .btn {
    display: inline-block;
    background: transparent;
    text-transform: uppercase;
    font-weight: 500;
    font-style: normal;
    font-size: 0.625rem;
    letter-spacing: 0.3em;
    color: rgba(223,190,106,0.7);
    border-radius: 0;
    padding: 18px 80px 20px;
    transition: all 0.7s ease-out;
    background: linear-gradient(270deg, rgba(223,190,106,0.8), rgba(146,111,52,0.8), rgba(34,34,34,0), rgba(34,34,34,0));
    background-position: 1% 50%;
    background-size: 300% 300%;
    text-decoration: none;
    margin: 0.625rem;
    border: none;
    border: 1px solid rgba(223,190,106,0.3);
  }
  
  .btn:hover {
    color: #fff;
    border: 1px solid rgba(223,190,106,0);
    color: $white;
    background-position: 99% 50%;
  }

//clear 
@mixin clear {
    content: '';
    clear: both;
    display:block;
}

$noteBook : 1239px;
$mobile : 749px;

@mixin inner {
  width: rem( 1240px ); margin:0 auto;
  @media screen and (max-width: $noteBook) {
    width: 100%;
    //mobile
    @media screen and( max-width: $mobile ){
    }
  }
}

